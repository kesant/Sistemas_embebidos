
Matrizled8x8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 8000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c0 58       	subi	r28, 0x80	; 128
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	
	DDRB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; // Inicializando los puertos B y D como salidas
  b0:	8a b9       	out	0x0a, r24	; 10
	
	char PORT[8] = {1,2,4,8,16,32,64,128}; // valores de los pines PORTD
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	de 01       	movw	r26, r28
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	01 90       	ld	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x26>
	
	char MENSAJE[]={0x0, 0x0, 0x4e, 0x4a, 0x7a, 0x7e, 0x0, 0x0, //9
  c4:	88 e7       	ldi	r24, 0x78	; 120
  c6:	e8 e0       	ldi	r30, 0x08	; 8
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	de 01       	movw	r26, r28
  cc:	19 96       	adiw	r26, 0x09	; 9
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x38>
	}; //ESPACIO
	
	while (1)
	{
		int cont=0;
		for (int i=0;i<15;i++)//
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b0 e0       	ldi	r27, 0x00	; 0
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	}; //ESPACIO
	
	while (1)
	{
		int cont=0;
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
		for (int i=0;i<15;i++)//
  de:	2c c0       	rjmp	.+88     	; 0x138 <main+0xa2>
			for (int k=0;k<50;k++)//
			{
				for (int j=0; j<8;j++)//
				{
					
					PORTD = PORT[j];
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	20 81       	ld	r18, Z
  ee:	2b b9       	out	0x0b, r18	; 11
					PORTB = ~MENSAJE[j+cont];
  f0:	fa 01       	movw	r30, r20
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	29 e0       	ldi	r18, 0x09	; 9
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	2c 0f       	add	r18, r28
  fc:	3d 1f       	adc	r19, r29
  fe:	e2 0f       	add	r30, r18
 100:	f3 1f       	adc	r31, r19
 102:	20 81       	ld	r18, Z
 104:	20 95       	com	r18
 106:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	e9 ef       	ldi	r30, 0xF9	; 249
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x76>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x7c>
 112:	00 00       	nop
		for (int i=0;i<15;i++)//
		{
			
			for (int k=0;k<50;k++)//
			{
				for (int j=0; j<8;j++)//
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x86>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	91 05       	cpc	r25, r1
 120:	fc f2       	brlt	.-66     	; 0xe0 <main+0x4a>
	{
		int cont=0;
		for (int i=0;i<15;i++)//
		{
			
			for (int k=0;k<50;k++)//
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x96>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	62 33       	cpi	r22, 0x32	; 50
 12e:	71 05       	cpc	r23, r1
 130:	9c f3       	brlt	.-26     	; 0x118 <main+0x82>
					PORTB = ~MENSAJE[j+cont];
					_delay_ms(1);// delay para que se muestre en la matriz sin parpadeos
				}
				
			}
			cont=cont+8;
 132:	48 5f       	subi	r20, 0xF8	; 248
 134:	5f 4f       	sbci	r21, 0xFF	; 255
	}; //ESPACIO
	
	while (1)
	{
		int cont=0;
		for (int i=0;i<15;i++)//
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	af 30       	cpi	r26, 0x0F	; 15
 13a:	b1 05       	cpc	r27, r1
 13c:	ac f3       	brlt	.-22     	; 0x128 <main+0x92>
 13e:	cb cf       	rjmp	.-106    	; 0xd6 <main+0x40>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
